
{
  "entities": {
    "PlatformOverview": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PlatformOverview",
      "type": "object",
      "description": "Represents a snapshot of the platform's key metrics.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Platform Overview record."
        },
        "totalTokenBalance": {
          "type": "number",
          "description": "Total token balance across all stores."
        },
        "totalStores": {
          "type": "number",
          "description": "Total number of registered stores."
        },
        "totalTransactions": {
          "type": "number",
          "description": "Total number of transactions across the platform."
        },
        "totalRevenue": {
          "type": "number",
          "description": "Total revenue generated by the platform."
        },
        "growthChartData": {
          "type": "string",
          "description": "JSON data representing the growth chart (serialized data)."
        },
        "lastUpdated": {
          "type": "string",
          "description": "Timestamp of the last update to this overview data.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "totalTokenBalance",
        "totalStores",
        "totalTransactions",
        "totalRevenue",
        "growthChartData",
        "lastUpdated"
      ]
    },
    "TopUpRequest": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TopUpRequest",
      "type": "object",
      "description": "Represents a request from a store to top-up their Pradana Token balance.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the top-up request."
        },
        "storeId": {
          "type": "string",
          "description": "Reference to Store. (Relationship: Store 1:N TopUpRequest)"
        },
        "amount": {
          "type": "number",
          "description": "Amount of Pradana Tokens requested."
        },
        "requestDate": {
          "type": "string",
          "description": "Date and time when the request was submitted.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Status of the request (e.g., 'pending', 'approved', 'rejected')."
        },
        "approvalDate": {
          "type": "string",
          "description": "Date and time when the request was approved or rejected.",
          "format": "date-time"
        },
        "approvedBy": {
          "type": "string",
          "description": "Identifier of the admin who approved or rejected the request."
        },
        "notes": {
          "type": "string",
          "description": "Additional notes or comments regarding the request."
        }
      },
      "required": [
        "id",
        "storeId",
        "amount",
        "requestDate",
        "status"
      ]
    },
    "Store": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Store",
      "type": "object",
      "description": "Represents a registered store's operational data.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the store."
        },
        "name": {
          "type": "string",
          "description": "Name of the store."
        },
        "pradanaTokenBalance": {
          "type": "number",
          "description": "Current Pradana Token balance of the store."
        },
        "premiumCatalogSubscriptionExpiry": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the premium catalog subscription expires."
        },
        "isActive": {
          "type": "boolean",
          "description": "Indicates whether the store is currently active."
        }
      },
      "required": [
        "id",
        "name",
        "pradanaTokenBalance",
        "isActive"
      ]
    },
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents the profile information for a store's admin user.",
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "description": "User's email address."
        },
        "name": {
          "type": "string",
          "description": "User's full name."
        },
        "role": {
          "type": "string",
          "description": "User's role, e.g., 'admin'."
        },
        "status": {
          "type": "string",
          "description": "User's status, e.g., 'active'."
        },
        "storeId": {
          "type": "string",
          "description": "The ID of the store this user is associated with."
        },
        "whatsapp": {
          "type": "string",
          "description": "User's WhatsApp phone number."
        }
      },
      "required": [
        "email",
        "name",
        "role",
        "status",
        "storeId"
      ]
    },
    "PremiumCatalogSubscription": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PremiumCatalogSubscription",
      "type": "object",
      "description": "Represents a store's subscription to a premium catalog.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the premium catalog subscription."
        },
        "catalogName": {
          "type": "string",
          "description": "Name of the premium catalog."
        },
        "startDate": {
          "type": "string",
          "description": "Date when the subscription started.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "Date when the subscription ends.",
          "format": "date-time"
        },
        "price": {
          "type": "number",
          "description": "Price of the subscription."
        }
      },
      "required": [
        "id",
        "catalogName",
        "startDate",
        "endDate",
        "price"
      ]
    },
    "PlatformSetting": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PlatformSetting",
      "type": "object",
      "description": "Represents a global platform setting or configuration.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the platform setting."
        },
        "settingKey": {
          "type": "string",
          "description": "Key identifying the setting (e.g., 'transactionFee', 'bankAccountInfo')."
        },
        "settingValue": {
          "type": "string",
          "description": "Value of the setting (can be a string, number, boolean, or JSON string)."
        },
        "description": {
          "type": "string",
          "description": "Description of what the setting controls."
        }
      },
      "required": [
        "id",
        "settingKey",
        "settingValue",
        "description"
      ]
    },
    "AdminRole": {
      "title": "AdminRole",
      "type": "object",
      "description": "An empty object whose document ID is a user's UID to signify admin privileges.",
      "properties": {}
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/platform_overviews/{platformOverviewId}",
        "definition": {
          "entityName": "PlatformOverview",
          "schema": {
            "$ref": "#/backend/entities/PlatformOverview"
          },
          "description": "Stores aggregated platform overview data. Accessible only to superadmins.",
          "params": [
            {
              "name": "platformOverviewId",
              "description": "The unique identifier for the platform overview document."
            }
          ]
        }
      },
      {
        "path": "/top_up_requests/{topUpRequestId}",
        "definition": {
          "entityName": "TopUpRequest",
          "schema": {
            "$ref": "#/backend/entities/TopUpRequest"
          },
          "description": "Stores top-up requests from all stores. Superadmins can approve or reject requests.",
          "params": [
            {
              "name": "topUpRequestId",
              "description": "The unique identifier for the top-up request."
            }
          ]
        }
      },
      {
        "path": "/stores/{storeId}",
        "definition": {
          "entityName": "Store",
          "schema": {
            "$ref": "#/backend/entities/Store"
          },
          "description": "Stores operational data for a store. Accessible to superadmins for management.",
          "params": [
            {
              "name": "storeId",
              "description": "The unique identifier for the store."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores profile information for a user, who is typically a store admin.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, corresponding to their Firebase Auth UID."
            }
          ]
        }
      },
      {
        "path": "/premium_catalog_subscriptions/{premiumCatalogSubscriptionId}",
        "definition": {
          "entityName": "PremiumCatalogSubscription",
          "schema": {
            "$ref": "#/backend/entities/PremiumCatalogSubscription"
          },
          "description": "Stores premium catalog subscription details. Accessible to superadmins for management.",
          "params": [
            {
              "name": "premiumCatalogSubscriptionId",
              "description": "The unique identifier for the premium catalog subscription."
            }
          ]
        }
      },
      {
        "path": "/platform_settings/{platformSettingId}",
        "definition": {
          "entityName": "PlatformSetting",
          "schema": {
            "$ref": "#/backend/entities/PlatformSetting"
          },
          "description": "Stores platform-wide settings. Accessible only to superadmins.",
          "params": [
            {
              "name": "platformSettingId",
              "description": "The unique identifier for the platform setting."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{adminId}",
        "definition": {
          "entityName": "AdminRole",
          "schema": {
            "$ref": "#/backend/entities/AdminRole"
          },
          "description": "Used for role-based access control, specifically to identify admin users. The existence of a document with the user's UID grants admin privileges.",
          "params": [
            {
              "name": "adminId",
              "description": "The unique identifier for the admin user (same as their UID)."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to provide a secure, scalable, and easily maintainable data model for the Chika POS F&B Admin Console. It emphasizes authorization independence through data denormalization to avoid complex `get()` calls in security rules and enable atomic operations. Structural segregation ensures that each collection has a homogeneous security posture, simplifying rule definitions. The structure facilitates simple, robust, and easily debuggable security rules.\n\nKey aspects of the design include:\n\n*   **Authorization Independence (Denormalization):** The `Store` documents store the `premiumCatalogSubscriptionExpiry`. This avoids needing to read a separate subscription document to determine access rights.\n*   **Structural Segregation:** Each collection is dedicated to a specific entity and access pattern, ensuring homogeneous security requirements within each collection. The `users` collection now holds store profile information, separating it from operational store data.\n*   **QAPs (Rules are not Filters):** The structure allows for secure list operations by ensuring that listing collections does not expose data that the user is not authorized to access. For example, the `platform_overviews` collection is only accessible to superadmins.\n*   **DBAC (No Custom Claims):** Authorization relies solely on `request.auth.uid`. Admin status can be checked via the existence of their `uid` in the `/roles_admin` collection, which can be used in rules to grant access to sensitive data."
  }
}

    