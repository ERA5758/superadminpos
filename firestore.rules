/**
 * @fileoverview Firestore Security Rules for the Chika POS F&B Admin Console.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control system.
 * - All users are assumed to be store admins, unless elevated to superadmin.
 * - Superadmin status is granted by the existence of a document in the `/roles_admin` collection with the user's UID as the document ID.
 * - Data access is generally restricted to superadmins or the owner of the specific store / user profile.
 *
 * Data Structure:
 * - `/platform_overviews/{platformOverviewId}`:  Aggregated platform data, only accessible to superadmins.
 * - `/stores/{storeId}`: Store operational data, only accessible to superadmins.
 * - `/stores/{storeId}/top_up_requests/{topUpRequestId}`: Top-up requests, manageable by superadmins.
 * - `/users/{userId}`: User profiles (store admins), accessible only to the user and superadmins. User ID must match the Firebase Auth UID.
 * - `/premium_catalog_subscriptions/{premiumCatalogSubscriptionId}`: Premium catalog subscriptions, only accessible to superadmins.
 * - `/platform_settings/{platformSettingId}`: Platform-wide settings, only accessible to superadmins.
 * - `/roles_admin/{adminId}`:  Marks a user as a superadmin. Document ID is the user's UID.
 *
 * Key Security Decisions:
 * - Superadmin status is determined by the existence of a document in the `/roles_admin` collection.
 * - The `list` operation is generally disallowed unless explicitly granted for a specific role and collection.
 * - The rules enforce strict ownership for user profiles (`/users/{userId}`).
 *
 * Denormalization for Authorization:
 * - Admin status is checked by verifying the existence of a document under `/roles_admin/{userId}`, avoiding the need for custom claims.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants superadmins full access to platform overview documents.
     * @path /platform_overviews/{platformOverviewId}
     * @allow (get, list, create, update, delete): if isAdmin()
     * @deny (get, list, create, update, delete): if !isAdmin()
     * @principle Restricts access to platform-wide data to superadmins.
     */
    match /platform_overviews/{platformOverviewId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows superadmins to manage top-up requests for stores.
     * @path /stores/{storeId}/top_up_requests/{topUpRequestId}
     * @allow (get, list, create, update, delete): if isAdmin()
     * @deny (get, list, create, update, delete): if !isAdmin()
     * @principle Restricts top-up request management to superadmins.
     */
    match /stores/{storeId}/top_up_requests/{topUpRequestId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows superadmins to manage store data.
     * @path /stores/{storeId}
     * @allow (get, list, create, update, delete): if isAdmin()
     * @deny (get, list, create, update, delete): if !isAdmin()
     * @principle Restricts store data management to superadmins.
     */
    match /stores/{storeId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Enforces strict user-ownership for profile data.
     * @path /users/{userId}
     * @allow (get, list, create, update, delete): if isOwner(userId) || isAdmin()
     * @deny (get, list, create, update, delete): if !isOwner(userId) && !isAdmin()
     * @principle Restricts access to a user's profile to the user themselves or superadmins.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if (isOwner(userId) && resource != null) || isAdmin();
      allow delete: if (isExistingOwner(userId)) || isAdmin();
    }

    /**
     * @description Allows superadmins to manage premium catalog subscriptions.
     * @path /premium_catalog_subscriptions/{premiumCatalogSubscriptionId}
     * @allow (get, list, create, update, delete): if isAdmin()
     * @deny (get, list, create, update, delete): if !isAdmin()
     * @principle Restricts premium catalog subscription management to superadmins.
     */
    match /premium_catalog_subscriptions/{premiumCatalogSubscriptionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows superadmins to manage platform-wide settings.
     * @path /platform_settings/{platformSettingId}
     * @allow (get, list, create, update, delete): if isAdmin()
     * @deny (get, list, create, update, delete): if !isAdmin()
     * @principle Restricts access to platform settings to superadmins.
     */
    match /platform_settings/{platformSettingId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines superadmins. The existence of a document here grants admin privileges.
     * @path /roles_admin/{adminId}
     * @allow (get, list, create, update, delete): if isAdmin()
     * @deny (get, list, create, update, delete): if !isAdmin()
     * @principle Role-based access control for superadmin status.
     */
    match /roles_admin/{adminId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if request.auth.uid == adminId && isAdmin(); //CRITICAL: Prevent non-admins from creating these documents.
      allow update: if false; //CRITICAL: Prevent updates.  Admin status should be immutable once granted.
      allow delete: if false; //CRITICAL: Prevent deletion.  Admin status should only be managed by backend functions.
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}