rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Platform overview data. Only accessible to admins.
     */
    match /platform_overviews/{platformOverviewId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Top-up requests for stores. Admins can manage, stores can request.
     */
    match /stores/{storeId}/top_up_requests/{topUpRequestId} {
      allow get: if isAdmin() || isStoreOwner(storeId);
      allow list: if isAdmin();
      allow create: if isSignedIn() && isStoreOwner(storeId); // Enforce store ownership on create
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Store operational data. Accessible to admins for management.
     */
    match /stores/{storeId} {
      allow get: if isAdmin() || isStoreOwner(storeId);
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description User profile information. User can only access their own profile.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.token.email == request.resource.data.email;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Premium catalog subscription details. Accessible to admins for management.
     */
    match /premium_catalog_subscriptions/{premiumCatalogSubscriptionId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Platform-wide settings. Only accessible to admins.
     */
    match /platform_settings/{platformSettingId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Admin role identifiers. Existence grants admin privileges.
     */
    match /roles_admin/{adminId} {
      allow get: if isAdmin() && adminId == request.auth.uid;
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin() && adminId == request.auth.uid;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }

  function isStoreOwner(storeId) {
      return get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId == request.auth.uid; // Check if the user is the store owner based on store data.
  }
}