rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants superadmins full access to platform overview data.
     * @path /platform_overviews/{platformOverviewId}
     * @allow (get, list) User with UID 'admin123' (present in /roles_admin/admin123) can read the platform overview.
     * @allow (create, update, delete) User with UID 'admin123' (present in /roles_admin/admin123) can modify the platform overview.
     * @deny (get, list, create, update, delete) User with UID 'nonAdmin456' (NOT present in /roles_admin/nonAdmin456) cannot access this data.
     * @principle Superadmin-only access to platform overview data.
     */
    match /platform_overviews/{platformOverviewId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows any authenticated user to create top-up requests, but only superadmins can read, update, or delete them.
     * @path /top_up_requests/{topUpRequestId}
     * @allow (create) User with UID 'user789' can create a top-up request.
     * @allow (get, list, update, delete) User with UID 'admin123' (present in /roles_admin/admin123) can read, update, and delete top-up requests.
     * @deny (get, list, update, delete) User with UID 'user789' cannot read, update, or delete top-up requests.
     * @principle Superadmins manage top-up requests; users can only create them.
     */
    match /top_up_requests/{topUpRequestId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants superadmins full access to store data.
     * @path /stores/{storeId}
     * @allow (get, list) User with UID 'admin123' (present in /roles_admin/admin123) can read store data.
     * @allow (create, update, delete) User with UID 'admin123' (present in /roles_admin/admin123) can modify store data.
     * @deny (get, list, create, update, delete) User with UID 'nonAdmin456' cannot access this data.
     * @principle Superadmin-only access to store data.
     */
    match /stores/{storeId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants superadmins full access to premium catalog subscription data.
     * @path /premium_catalog_subscriptions/{premiumCatalogSubscriptionId}
     * @allow (get, list) User with UID 'admin123' (present in /roles_admin/admin123) can read premium catalog subscription data.
     * @allow (create, update, delete) User with UID 'admin123' (present in /roles_admin/admin123) can modify premium catalog subscription data.
     * @deny (get, list, create, update, delete) User with UID 'nonAdmin456' cannot access this data.
     * @principle Superadmin-only access to premium catalog subscription data.
     */
    match /premium_catalog_subscriptions/{premiumCatalogSubscriptionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants superadmins full access to platform settings.
     * @path /platform_settings/{platformSettingId}
     * @allow (get, list) User with UID 'admin123' (present in /roles_admin/admin123) can read platform settings.
     * @allow (create, update, delete) User with UID 'admin123' (present in /roles_admin/admin123) can modify platform settings.
     * @deny (get, list, create, update, delete) User with UID 'nonAdmin456' cannot access this data.
     * @principle Superadmin-only access to platform settings.
     */
    match /platform_settings/{platformSettingId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines admin roles based on the existence of a document with their UID as the document ID.
     * @path /roles_admin/{adminId}
     * @allow (get) User with UID 'admin123' can verify their admin status by reading /roles_admin/admin123.
     * @allow (create) This would need to be manually done by an existing admin.
     * @deny (list, update, delete) Listing is not allowed. Updates and deletes are not supported.
     * @principle Role-based access control: presence in this collection grants admin privileges.
     */
    match /roles_admin/{adminId} {
      allow get: if request.auth.uid == adminId; // Only the admin user can read their own role.
      allow list: if false; // prevent listing all admin users.
      allow create: if false; // Creating admin accounts should be handled manually.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is an admin by verifying the existence of a document in /roles_admin/{userId}.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the provided userId matches the authenticated user's UID.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the userId matches the authenticated user's UID, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}