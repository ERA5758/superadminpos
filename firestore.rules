/**
 * @fileOverview
 * This ruleset enforces a role-based access control model where superadmins, identified by their UID existing as a document ID in the `/roles_admin` collection, have broad access to platform-level data, while store admins (users) primarily have access to their own user profiles. Data denormalization is used to simplify security rules and avoid costly `get()` calls.
 *
 * Data Structure:
 * - `/platform_overviews/{platformOverviewId}`: Platform-wide overview data. Only accessible to superadmins.
 * - `/stores/{storeId}`: Store data. Only accessible to superadmins.
 * - `/stores/{storeId}/top_up_requests/{topUpRequestId}`: Top-up requests for stores. Only accessible to superadmins.
 * - `/users/{userId}`: User profiles. Accessible only to the user themselves (ownership).
 * - `/premium_catalog_subscriptions/{premiumCatalogSubscriptionId}`: Premium catalog subscriptions. Only accessible to superadmins.
 * - `/platform_settings/{platformSettingId}`: Platform-wide settings. Only accessible to superadmins.
 * - `/roles_admin/{adminId}`: Documents representing admin roles. Existence of a document signifies admin status.
 *
 * Key Security Decisions:
 * - Only superadmins can access aggregated platform data (`/platform_overviews`, `/stores`, `/premium_catalog_subscriptions`, `/platform_settings`, `/stores/{storeId}/top_up_requests`).
 * - Users can only access their own user profile (`/users/{userId}`).
 * - Listing collections is generally restricted to prevent unauthorized data exposure.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the existence of a document in `/roles_admin/{userId}`, avoiding the need for custom claims.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants superadmins access to platform overview data.
     * @path /platform_overviews/{platformOverviewId}
     * @allow get, list: if isAdmin();
     * @allow create, update, delete: if isAdmin();
     * @deny get, list: if !isAdmin();
     * @deny create, update, delete: if !isAdmin();
     * @principle Enforces role-based access control; only admins can manage platform overviews.
     */
    match /platform_overviews/{platformOverviewId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants superadmins access to top-up requests for stores.
     * @path /stores/{storeId}/top_up_requests/{topUpRequestId}
     * @allow get, list: if isAdmin();
     * @allow create, update, delete: if isAdmin();
     * @deny get, list: if !isAdmin();
     * @deny create, update, delete: if !isAdmin();
     * @principle Enforces role-based access control; only admins can manage top-up requests.
     */
    match /stores/{storeId}/top_up_requests/{topUpRequestId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants superadmins access to store data.
     * @path /stores/{storeId}
     * @allow get, list: if isAdmin();
     * @allow create, update, delete: if isAdmin();
     * @deny get, list: if !isAdmin();
     * @deny create, update, delete: if !isAdmin();
     * @principle Enforces role-based access control; only admins can manage stores.
     */
    match /stores/{storeId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants a user access to their own profile data.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
     * @allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if !isOwner(userId);
     * @deny list: if !isOwner(userId);
     * @deny create: if !isOwner(userId);
     * @deny update: if !isExistingOwner(userId);
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces document ownership; users can only access their own profile.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants superadmins access to premium catalog subscription data.
     * @path /premium_catalog_subscriptions/{premiumCatalogSubscriptionId}
     * @allow get, list: if isAdmin();
     * @allow create, update, delete: if isAdmin();
     * @deny get, list: if !isAdmin();
     * @deny create, update, delete: if !isAdmin();
     * @principle Enforces role-based access control; only admins can manage premium catalog subscriptions.
     */
    match /premium_catalog_subscriptions/{premiumCatalogSubscriptionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants superadmins access to platform settings data.
     * @path /platform_settings/{platformSettingId}
     * @allow get, list: if isAdmin();
     * @allow create, update, delete: if isAdmin();
     * @deny get, list: if !isAdmin();
     * @deny create, update, delete: if !isAdmin();
     * @principle Enforces role-based access control; only admins can manage platform settings.
     */
    match /platform_settings/{platformSettingId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
      * @description Allows anyone to get and list admin role documents to check for admin status, but only allows admins to create, update or delete them.
      * @path /roles_admin/{adminId}
      * @allow get, list: if true;
      * @allow create: if isAdmin() && isOwner(adminId);
      * @allow update: if isAdmin() && resource != null && isOwner(adminId);
      * @allow delete: if isAdmin() && resource != null && isOwner(adminId);
      * @deny create: if !isAdmin();
      * @deny update: if !isAdmin();
      * @deny delete: if !isAdmin();
      * @principle Anyone can check if a UID has admin roles by `get` and `list` but only an admin can assign roles
      */
    match /roles_admin/{adminId} {
        allow get: if true;
        allow list: if true;
        allow create: if isAdmin() && isOwner(adminId);
        allow update: if isAdmin() && resource != null && isOwner(adminId);
        allow delete: if isAdmin() && resource != null && isOwner(adminId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}